{"version":3,"sources":["EditTodo.js","TodoItem.js","TodoList.js","CreateTodo.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["EditTodo","todo","setEditToggle","editTodo","useState","content","text","setText","onSubmit","e","a","preventDefault","target","id","axios","put","catch","console","log","className","type","value","onChange","onKeyDown","key","stopPropagation","TodoItem","handleToggle","handleDelete","editToggle","onClickComplete","isDone","onClickDelete","delete","checked","onDoubleClick","onClick","TodoList","todos","filter","filteredTodos","map","CreateTodo","addTodo","post","then","response","data","placeholder","Footer","itemCount","clearCompleted","anyCompleted","changeFilter","onClearCompleted","updatedTodos","onFilter","name","App","setTodos","setFilter","useEffect","get","fetchData","checkAll","allCompleted","elem","newTodo","copy","Number","count","findCount","anyComplete","newFilter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7be71e91.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, {useState} from 'react';\n\n//Component is used to edit tasks on a double click and submits changes to database\n\nconst EditTodo = ({todo, setEditToggle, editTodo}) =>  {\n\n  const [text, setText ] = useState(todo.content)\n\n  const onChange = (e) => {\n    setText(e.target.value)\n  }\n\n  const onSubmit = async (e) =>{\n    e.preventDefault()\n    editTodo(e.target.id, text)\n    await axios.put(`/todos/${e.target.id}`, {...todo, content: text})\n    .catch(e => {\n        console.log(e);\n        setText(text)\n    });\n    setEditToggle(true)\n  }\n\n  return(\n    <form className =  \"ToDoListItem-Edit\" onSubmit = {onSubmit} id = {todo.id}>\n      <input type = \"text\" value = {text} onChange = {onChange}\n        onKeyDown={(e) => {\n          if (e.key === 'Escape') {\n            setEditToggle(true)\n            e.preventDefault()\n            e.stopPropagation()\n          }\n        }}>\n      </input>\n    </form>\n  )\n}\n\nexport default EditTodo\n","import React, {useState} from 'react';\nimport axios from 'axios'\nimport EditTodo from './EditTodo'\n\nconst TodoItem = ({todo, handleToggle, handleDelete, editTodo}) =>{\n\n  const [editToggle, setEditToggle] = useState(true)\n\n  //Updates database with checked complete items\n  const onClickComplete = async (e) => {\n    handleToggle(e.target.id)\n    await axios.put(`/todos/${todo.id}`, {...todo, isDone: !todo.isDone})\n    .catch(e => {\n        console.log(e);\n    });\n  }\n\n  //Updates database with deleted items\n  const onClickDelete = async (e) => {\n    handleDelete(e.target.id)\n    await axios.delete(`/todos/${todo.id}`)\n    .catch(e => {\n        console.log(e);\n    });\n\n  }\n\n  return (\n    <li className = \"ToDoListItem\" key = {todo.id}>\n        <input  id = {todo.id} type=\"checkbox\"  onChange = {onClickComplete} checked = {todo.isDone}></input>\n        {editToggle ? (\n            <label className = {todo.isDone? \"ToDoListItem-Label-Strike\" : \"ToDoListItem-Label\"} onDoubleClick={() =>{setEditToggle(false)}} >{todo.content}</label>\n          ) :\n          (<EditTodo todo = {todo} editTodo = {editTodo} setEditToggle = {setEditToggle}/>)}\n        <div className = \"ToDoListItem-Delete\" id = {todo.id} onClick = {onClickDelete}> x </div>\n    </li>\n\n  )\n}\n\nexport default TodoItem\n","import React from 'react';\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({todos, handleToggle, handleDelete, filter, editTodo}) =>{\n  //todos list is fist filtered if the filter is selected in the state before\n  //displaying all appropriate todos.\n  let filteredTodos = [...todos]\n  if(filter === \"Completed\"){\n    filteredTodos = todos.filter(todo => {\n      return todo.isDone;\n    });\n  }\n\n  if(filter === \"Active\"){\n    filteredTodos = todos.filter(todo => {\n      return !todo.isDone;\n    });\n  }\n\n  return(\n    <ul className = \"TodoList\">\n      {filteredTodos.map(todo => {\n        return (<TodoItem todo = {todo} handleToggle = {handleToggle} handleDelete = {handleDelete} editTodo = {editTodo}/>)\n      })\n      }\n    </ul>\n  )\n}\n\nexport default TodoList\n","import axios from 'axios';\nimport React, {useState} from 'react';\n\n//Component\nconst CreateTodo = ({addTodo}) => {\n\n\n  const [text, setText ] = useState(\"\")\n\n  const onChange = (e) =>{\n    setText(e.target.value)\n  }\n\n  const onSubmit = async (e) =>{\n    e.preventDefault()\n    await axios.post('/todos', {content: text, isDone: false})\n    .then(response => {\n        addTodo(response.data)\n        setText(\"\")\n    })\n    .catch(e => {\n        console.log(e);\n        setText(text)\n    });\n  }\n\n  return(\n    <form className = \"CreateTodoUpper-form\" onSubmit = {onSubmit}>\n      <input className = \"CreateTodoUpper-form-input\" type = \"text\" value = {text} placeholder = \"What needs to be done?\" onChange = {onChange} ></input>\n    </form>\n  )\n}\n\nexport default CreateTodo\n","import React from 'react';\nimport axios from 'axios';\n\n//Component displays the filtering, item count, and clear component buttons on bottom of app\nconst Footer = ({itemCount, clearCompleted, todos, anyCompleted, changeFilter, filter}) =>{\n\n  //clears all completed tasks in database and moves state back up to app.js\n  const onClearCompleted =  async () => {\n    let updatedTodos = [...todos]\n    clearCompleted()\n    for(let todo of updatedTodos){\n      if(todo.isDone){\n        await axios.delete(`/todos/${todo.id}`)\n        .catch(e => {\n            console.log(e);\n        });\n      }\n    }\n  }\n\n  const onFilter = (e) => {\n    changeFilter(e.target.name)\n  }\n\n  return(\n    <div>\n      <div className = \"Footer\">\n        <div>{itemCount} Items Left</div>\n        <div className = \"Footer-Filter-Btn-Container\">\n          <button className = {filter === \"All\" ? \"Footer-Filter-Btn-Selected\" : \"Footer-Filter-Btn\"} onClick = {onFilter} name = \"All\">All</button>\n          <button className = {filter === \"Active\" ? \"Footer-Filter-Btn-Selected\" : \"Footer-Filter-Btn\"} onClick = {onFilter} name = \"Active\">Active</button>\n          <button className = {filter === \"Completed\" ? \"Footer-Filter-Btn-Selected\" : \"Footer-Filter-Btn\"} onClick = {onFilter} name = \"Completed\">Completed</button>\n        </div>\n        <button onClick = {onClearCompleted} className = {anyCompleted? \"Footer-Clear-Completed-Btn\" : \"Footer-Clear-Completed-Btn-hidden\"}>Clear Completed</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import './App.css';\nimport TodoList from './TodoList'\nimport CreateTodo from './CreateTodo'\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Footer from './Footer'\nimport {FiChevronDown} from 'react-icons/fi'\n\nfunction App() {\n  const [ todos, setTodos ] = useState([]);\n  const [filter, setFilter ] = useState(\"All\")\n\n  //Fetch initial data from database for the app to load.\n  useEffect( () => {\n    async function fetchData(){\n        await axios.get('/todos')\n        .then(response => {\n          setTodos(response.data)\n        })\n        .catch(e => {\n            console.log(e);\n            setTodos(todos)\n        });\n    }\n      fetchData()\n\n  }, [])\n\n  //toggles the checkbox on and off for completed tasks in the state.\n  const handleToggle = (id) => {\n    let updatedTodos = todos.map(todo => {\n      return todo.id === Number(id) ? { ...todo, isDone: !todo.isDone } : { ...todo};\n    });\n    setTodos(updatedTodos);\n  }\n  //adds todo to the state\n  const addTodo = (newTodo) => {\n    let copy = [...todos];\n    copy = [...copy, { ...newTodo }];\n    setTodos(copy);\n\n  }\n\n  //deletes a single todo from the state\n  const deleteTodo = (id) => {\n    let updatedTodos = todos.filter(todo => {\n      return todo.id !== Number(id);\n    });\n    setTodos(updatedTodos);\n  }\n\n  //sets the state variable \"filter\" to whichever filter is clicked.\n  const changeFilter = (newFilter) => {\n    setFilter(newFilter)\n  }\n\n  //handles state change for marking all tasks as complete when the\n  //chevron  button is clicked\n  const checkAll = () => {\n    let updatedTodos = [...todos]\n    let allCompleted = true;\n    for(let elem of updatedTodos){\n      if(!elem.isDone){allCompleted = false}\n      elem.isDone = true;\n    }\n    if(allCompleted){\n      for(let elem of updatedTodos){\n        elem.isDone = false;\n      }\n    }\n    setTodos(updatedTodos);\n  }\n\n  //handles state change for deleting all completed tasks\n  //when the clear completed button is clicked\n  const clearCompleted = () => {\n    let updatedTodos = todos.filter(todo => {\n      return !todo.isDone;\n    });\n    setTodos(updatedTodos);\n  }\n\n  //Calculates the total completed tasks for display in the footer\n  const findCount = () => {\n    let count = 0;\n    for(let elem of todos){\n      if(!elem.isDone){count++}\n    }\n    return count;\n  }\n\n  //Determines if any tasks are currently completed.\n  //Needed to toggle the \"clear completed\" button from visible to hidden\n  const anyCompleted = () => {\n    let anyComplete = false;\n    for(let elem of todos){\n      if(elem.isDone){\n        anyComplete = true;\n        break;\n      }\n    }\n    return anyComplete\n  }\n\n  //handles state change for edited tasks\n  const editTodo = (id, text) => {\n    let updatedTodos = [...todos]\n    for(let todo of updatedTodos){\n      if(todo.id === Number(id)){\n        todo.content = text\n      }\n    }\n    setTodos(updatedTodos);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className = \"Title\">todos</h1>\n      <div className = \"TodoListContainer\">\n        <div className = \"CreateTodoUpper\">\n          <FiChevronDown onClick = {checkAll}/>\n          <CreateTodo addTodo = {addTodo}/>\n        </div>\n        <TodoList  todos = {todos} handleToggle = {handleToggle} handleDelete = {deleteTodo} filter = {filter} editTodo = {editTodo}/>\n        <Footer className = \"Footer\" filter = {filter} checkAll = {checkAll} itemCount = {findCount()} clearCompleted = {clearCompleted} todos = {todos} anyCompleted = {anyCompleted()} changeFilter = {changeFilter}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}